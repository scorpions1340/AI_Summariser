#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ AI Summariser
"""

import asyncio
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(os.path.abspath(__file__)))

from ai_summariser import TelegramSummariser


async def test_basic_functionality():
    """–¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö (–∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π)
    db_path = "/Users/apple/Desktop/Tg_Parser/tg_parser.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(db_path).exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É tg_parser.db")
        return False
    
    try:
        print("üîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Summariser...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞
        async with TelegramSummariser(db_path) as summariser:
            
            # –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫
            print("\nüìÅ –¢–µ—Å—Ç 1: –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–∞–ø–æ–∫")
            folders = await summariser.get_folders()
            print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(folders)}")
            
            if folders:
                for folder in folders[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 –ø–∞–ø–∫–∏
                    print(f"   - {folder.id}: {folder.name}")
            
            # –¢–µ—Å—Ç 2: –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–∞–ø–∫–µ
            if folders:
                print(f"\nüìä –¢–µ—Å—Ç 2: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞–ø–∫–µ {folders[0].id}")
                folder_info = await summariser.get_folder_info(folders[0].id)
                if folder_info:
                    print(f"‚úÖ –ü–∞–ø–∫–∞: {folder_info.name}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–∞–ø–∫–µ")
            
            # –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ (–±–µ–∑ –ò–ò –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞)
            if folders:
                print(f"\nüìù –¢–µ—Å—Ç 3: –°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–∞–ø–∫–∏ {folders[0].id}")
                summary = await summariser.summarise_folder(
                    folder_id=folders[0].id,
                    limit=10,  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                    days_back=30,
                    include_ai_summary=False  # –û—Ç–∫–ª—é—á–∞–µ–º –ò–ò –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞
                )
                
                if summary:
                    print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!")
                    print(f"   üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {summary.total_posts}")
                    print(f"   üìÖ –ü–µ—Ä–∏–æ–¥: {summary.date_range}")
                    print(f"   üìù –ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ: {summary.overall_summary[:100]}...")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")
            
            # –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
            if folders:
                print(f"\nüîç –¢–µ—Å—Ç 4: –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ {folders[0].id}")
                search_summary = await summariser.search_and_summarise(
                    folder_id=folders[0].id,
                    search_term="–Ω–æ–≤–æ—Å—Ç–∏",
                    limit=5
                )
                
                if search_summary:
                    print(f"‚úÖ –ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à–µ–Ω!")
                    print(f"   üîç –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {search_summary.total_posts}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –ø–æ–∏—Å–∫")
        
        print("\nüéâ –í—Å–µ –±–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
        return True
        
    except Exception as e:
        print(f"\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        return False


async def test_ai_functionality():
    """–¢–µ—Å—Ç –ò–ò —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ (—Ç—Ä–µ–±—É–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã–π FreeGPT —Å–µ—Ä–≤–µ—Ä)"""
    
    db_path = "/Users/apple/Desktop/Tg_Parser/tg_parser.db"
    
    if not Path(db_path).exists():
        print("‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –¥–ª—è –ò–ò —Ç–µ—Å—Ç–∞")
        return False
    
    try:
        print("\nü§ñ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ò–ò —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏...")
        
        async with TelegramSummariser(db_path) as summariser:
            
            folders = await summariser.get_folders()
            if not folders:
                print("‚ùå –ù–µ—Ç –ø–∞–ø–æ–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò")
                return False
            
            # –¢–µ—Å—Ç –ò–ò-—Å–≤–æ–¥–∫–∏
            print(f"\nüìù –¢–µ—Å—Ç –ò–ò-—Å–≤–æ–¥–∫–∏ –¥–ª—è –ø–∞–ø–∫–∏ {folders[0].id}")
            summary = await summariser.summarise_folder(
                folder_id=folders[0].id,
                limit=5,
                days_back=7,
                include_ai_summary=True
            )
            
            if summary and "–ò–ò-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in summary.overall_summary:
                print("‚úÖ –ò–ò-—Å–≤–æ–¥–∫–∞ —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
                print(f"   üéØ –¢–µ–º—ã: {', '.join(summary.main_topics[:3])}")
            else:
                print("‚ö†Ô∏è –ò–ò-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")
            
            # –¢–µ—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò
            print(f"\n‚ùì –¢–µ—Å—Ç –≤–æ–ø—Ä–æ—Å–∞ –∫ –ò–ò")
            response = await summariser.ask_about_posts(
                folder_id=folders[0].id,
                question="–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å?",
                limit=5,
                days_back=7
            )
            
            if response and "–Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" not in response.answer.lower():
                print("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç –ò–ò –ø–æ–ª—É—á–µ–Ω!")
                print(f"   ü§ñ –û—Ç–≤–µ—Ç: {response.answer[:100]}...")
            else:
                print("‚ö†Ô∏è –ò–ò-—Å–µ—Ä–≤–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –ò–ò: {e}")
        return False


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ AI Summariser")
    print("=" * 50)
    
    # –ë–∞–∑–æ–≤—ã–µ —Ç–µ—Å—Ç—ã
    basic_success = await test_basic_functionality()
    
    if basic_success:
        # –ò–ò —Ç–µ—Å—Ç—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        print("\n" + "=" * 50)
        print("üí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ò–ò —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ:")
        print("   1. FreeGPT —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://127.0.0.1:1338")
        print("   2. –í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –µ—Å—Ç—å –ø–æ—Å—Ç—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        
        user_input = input("\n–•–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ò–ò —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å? (y/n): ")
        if user_input.lower() in ['y', 'yes', '–¥–∞']:
            await test_ai_functionality()
    
    print("\nüèÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")


if __name__ == "__main__":
    asyncio.run(main()) 