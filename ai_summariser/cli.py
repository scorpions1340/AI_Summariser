#!/usr/bin/env python3
"""
CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è AI Summariser
"""

import asyncio
import argparse
import json
import logging
from pathlib import Path
from typing import Optional

from . import TelegramSummariser


def setup_logging(verbose: bool = False):
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    level = logging.DEBUG if verbose else logging.INFO
    logging.basicConfig(
        level=level,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
    )


async def list_folders(db_path: str):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫"""
    async with TelegramSummariser(db_path) as summariser:
        folders = await summariser.get_folders()
        
        if not folders:
            print("–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return
        
        print("üìÅ –î–æ—Å—Ç—É–ø–Ω—ã–µ –ø–∞–ø–∫–∏:")
        for folder in folders:
            print(f"  {folder.id}: {folder.name}")


async def summarise_folder(
    db_path: str,
    folder_id: int,
    limit: Optional[int] = None,
    days_back: Optional[int] = None,
    output_file: Optional[str] = None,
    format_output: str = "text"
):
    """–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø–∞–ø–∫–µ"""
    async with TelegramSummariser(db_path) as summariser:
        summary = await summariser.summarise_folder(
            folder_id=folder_id,
            limit=limit if limit is not None else 20,
            days_back=days_back if days_back is not None else 7
        )
        
        if not summary:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏")
            return
        
        if format_output == "json":
            output = json.dumps(summary.model_dump(), indent=2, ensure_ascii=False)
        else:
            output = format_summary_text(summary)
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(output)
            print(f"‚úÖ –°–≤–æ–¥–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ {output_file}")
        else:
            print(output)


async def ask_question(
    db_path: str,
    folder_id: int,
    question: str,
    limit: Optional[int] = None,
    days_back: Optional[int] = None,
    output_file: Optional[str] = None
):
    """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"""
    async with TelegramSummariser(db_path) as summariser:
        response = await summariser.ask_about_posts(
            folder_id=folder_id,
            question=question,
            limit=limit if limit is not None else 20,
            days_back=days_back if days_back is not None else 7
        )
        
        if not response:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ—Ç–≤–µ—Ç–∞")
            return
        
        output = f"""
‚ùì –í–æ–ø—Ä–æ—Å: {response.question}

ü§ñ –û—Ç–≤–µ—Ç: {response.answer}

üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}
üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {len(response.related_posts)}
        """.strip()
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(output)
            print(f"‚úÖ –û—Ç–≤–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")
        else:
            print(output)


async def search_posts(
    db_path: str,
    folder_id: int,
    search_term: str,
    limit: Optional[int] = None,
    output_file: Optional[str] = None
):
    """–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤"""
    async with TelegramSummariser(db_path) as summariser:
        summary = await summariser.search_and_summarise(
            folder_id=folder_id,
            search_term=search_term,
            limit=limit if limit is not None else 20
        )
        
        if not summary:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ")
            return
        
        output = f"""
üîç –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: "{search_term}"
üìà –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {summary.total_posts}
üìÖ –ü–µ—Ä–∏–æ–¥: {summary.date_range}

üìù –°–≤–æ–¥–∫–∞:
{summary.overall_summary}

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
{chr(10).join(f"  ‚Ä¢ {topic}" for topic in summary.main_topics)}
        """.strip()
        
        if output_file:
            with open(output_file, 'w', encoding='utf-8') as f:
                f.write(output)
            print(f"‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
        else:
            print(output)


def format_summary_text(summary) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–≤–æ–¥–∫—É –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ"""
    output = f"""
üìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–∞–ø–∫–µ: {summary.folder_name}
üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {summary.total_posts}
üìÖ –ü–µ—Ä–∏–æ–¥: {summary.date_range}

üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:
{chr(10).join(f"  ‚Ä¢ {topic}" for topic in summary.main_topics)}

üìù –û–±—â–∞—è —Å–≤–æ–¥–∫–∞:
{summary.overall_summary}

üì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:
"""
    
    for i, post in enumerate(summary.posts[:10], 1):
        output += f"""
  {i}. [{post.date.strftime('%d.%m.%Y %H:%M')}] {post.channel_title}
     {post.summary}
"""
        if post.link:
            output += f"     üîó {post.link}\n"
    
    return output.strip()


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è CLI"""
    parser = argparse.ArgumentParser(
        description="AI Summariser - –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏ Telegram –ø–æ—Å—Ç–æ–≤",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  %(prog)s list --db /path/to/tg_parser.db
  %(prog)s summarise --db /path/to/tg_parser.db --folder 1 --limit 50
  %(prog)s ask --db /path/to/tg_parser.db --folder 1 --question "–ö–∞–∫–∏–µ –Ω–æ–≤–æ—Å—Ç–∏?"
  %(prog)s search --db /path/to/tg_parser.db --folder 1 --term "–Ω–æ–≤–æ—Å—Ç–∏"
        """
    )
    
    parser.add_argument(
        "--db", "--database",
        required=True,
        help="–ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö tg_parser.db"
    )
    
    parser.add_argument(
        "--verbose", "-v",
        action="store_true",
        help="–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥"
    )
    
    subparsers = parser.add_subparsers(dest="command", help="–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã")
    
    # –ö–æ–º–∞–Ω–¥–∞ list
    list_parser = subparsers.add_parser("list", help="–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫")
    
    # –ö–æ–º–∞–Ω–¥–∞ summarise
    summarise_parser = subparsers.add_parser("summarise", help="–°–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É –ø–æ –ø–∞–ø–∫–µ")
    summarise_parser.add_argument("--folder", "-f", type=int, required=True, help="ID –ø–∞–ø–∫–∏")
    summarise_parser.add_argument("--limit", "-l", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤")
    summarise_parser.add_argument("--days-back", "-d", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
    summarise_parser.add_argument("--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    summarise_parser.add_argument("--format", choices=["text", "json"], default="text", help="–§–æ—Ä–º–∞—Ç –≤—ã–≤–æ–¥–∞")
    
    # –ö–æ–º–∞–Ω–¥–∞ ask
    ask_parser = subparsers.add_parser("ask", help="–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò")
    ask_parser.add_argument("--folder", "-f", type=int, required=True, help="ID –ø–∞–ø–∫–∏")
    ask_parser.add_argument("--question", "-q", required=True, help="–í–æ–ø—Ä–æ—Å –∫ –ò–ò")
    ask_parser.add_argument("--limit", "-l", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤")
    ask_parser.add_argument("--days-back", "-d", type=int, help="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥")
    ask_parser.add_argument("--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    # –ö–æ–º–∞–Ω–¥–∞ search
    search_parser = subparsers.add_parser("search", help="–ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤")
    search_parser.add_argument("--folder", "-f", type=int, required=True, help="ID –ø–∞–ø–∫–∏")
    search_parser.add_argument("--term", "-t", required=True, help="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å")
    search_parser.add_argument("--limit", "-l", type=int, help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
    search_parser.add_argument("--output", "-o", help="–§–∞–π–ª –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞")
    
    args = parser.parse_args()
    
    if not args.command:
        parser.print_help()
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    if not Path(args.db).exists():
        print(f"‚ùå –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.db}")
        return
    
    setup_logging(args.verbose)
    
    try:
        if args.command == "list":
            asyncio.run(list_folders(args.db))
        elif args.command == "summarise":
            asyncio.run(summarise_folder(
                args.db, args.folder, args.limit, args.days_back, args.output, args.format
            ))
        elif args.command == "ask":
            asyncio.run(ask_question(
                args.db, args.folder, args.question, args.limit, args.days_back, args.output
            ))
        elif args.command == "search":
            asyncio.run(search_posts(
                args.db, args.folder, args.term, args.limit, args.output
            ))
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        if args.verbose:
            raise


if __name__ == "__main__":
    main() 