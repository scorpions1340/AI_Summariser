#!/usr/bin/env python3
"""
–ü—Ä–∏–º–µ—Ä –±–∞–∑–æ–≤–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è AI Summariser
"""

import asyncio
import logging
from pathlib import Path

from ai_summariser import TelegramSummariser

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def basic_summarization():
    """–ë–∞–∑–æ–≤—ã–π –ø—Ä–∏–º–µ—Ä —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏"""
    
    # –ü—É—Ç—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db_path = "/path/to/your/tg_parser.db"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    if not Path(db_path).exists():
        logger.error(f"–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {db_path}")
        return
    
    async with TelegramSummariser(db_path) as summariser:
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –ø–∞–ø–æ–∫
            folders = await summariser.get_folders()
            logger.info(f"–ù–∞–π–¥–µ–Ω–æ –ø–∞–ø–æ–∫: {len(folders)}")
            
            if not folders:
                logger.warning("–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
                return
            
            # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞–ø–∫–∏
            folder_id = folders[0].id
            logger.info(f"–°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É –¥–ª—è –ø–∞–ø–∫–∏: {folders[0].name} (ID: {folder_id})")
            
            summary = await summariser.summarise_folder(
                folder_id=folder_id,
                limit=20,  # –ú–∞–∫—Å–∏–º—É–º 20 –ø–æ—Å—Ç–æ–≤
                days_back=7  # –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
            )
            
            if summary:
                print(f"\nüìä –°–≤–æ–¥–∫–∞ –ø–æ –ø–∞–ø–∫–µ: {summary.folder_name}")
                print(f"üìà –í—Å–µ–≥–æ –ø–æ—Å—Ç–æ–≤: {summary.total_posts}")
                print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {summary.date_range}")
                
                print(f"\nüéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:")
                for topic in summary.main_topics:
                    print(f"  ‚Ä¢ {topic}")
                
                print(f"\nüìù –û–±—â–∞—è —Å–≤–æ–¥–∫–∞:")
                print(summary.overall_summary)
                
                print(f"\nüì∞ –ü–æ—Å–ª–µ–¥–Ω–∏–µ –ø–æ—Å—Ç—ã:")
                for i, post in enumerate(summary.posts[:5], 1):
                    print(f"  {i}. [{post.date.strftime('%d.%m.%Y %H:%M')}] {post.channel_title}")
                    print(f"     {post.summary}")
                    if post.link:
                        print(f"     üîó {post.link}")
                    print()
            else:
                logger.error("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ–¥–∫—É")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–≤–æ–¥–∫–∏: {e}")


async def ask_questions():
    """–ü—Ä–∏–º–µ—Ä –∑–∞–¥–∞–≤–∞–Ω–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤ –ò–ò"""
    
    db_path = "/path/to/your/tg_parser.db"
    
    async with TelegramSummariser(db_path) as summariser:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤—É—é –ø–∞–ø–∫—É
            folders = await summariser.get_folders()
            if not folders:
                logger.warning("–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            folder_id = folders[0].id
            
            # –ó–∞–¥–∞–µ–º —Ä–∞–∑–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã
            questions = [
                "–ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—Å—É–∂–¥–∞–ª–∏—Å—å –≤ –ø–æ—Å—Ç–∞—Ö?",
                "–ö–∞–∫–∏–µ –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –±—ã–ª–∏?",
                "–ö–∞–∫–∏–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç—Ä–µ–Ω–¥—ã —É–ø–æ–º–∏–Ω–∞–ª–∏—Å—å?",
                "–ß—Ç–æ –≥–æ–≤–æ—Ä–∏–ª–æ—Å—å –ø—Ä–æ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç?"
            ]
            
            for question in questions:
                print(f"\n‚ùì –í–æ–ø—Ä–æ—Å: {question}")
                
                response = await summariser.ask_about_posts(
                    folder_id=folder_id,
                    question=question,
                    limit=20,
                    days_back=7
                )
                
                if response:
                    print(f"ü§ñ –û—Ç–≤–µ—Ç: {response.answer}")
                    print(f"üìä –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {response.confidence:.2f}")
                    print(f"üîó –°–≤—è–∑–∞–Ω–Ω—ã–µ –ø–æ—Å—Ç—ã: {len(response.related_posts)}")
                else:
                    print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç")
                
                print("-" * 50)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–¥–∞–≤–∞–Ω–∏–∏ –≤–æ–ø—Ä–æ—Å–æ–≤: {e}")


async def search_content():
    """–ü—Ä–∏–º–µ—Ä –ø–æ–∏—Å–∫–∞ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É"""
    
    db_path = "/path/to/your/tg_parser.db"
    
    async with TelegramSummariser(db_path) as summariser:
        try:
            folders = await summariser.get_folders()
            if not folders:
                logger.warning("–ü–∞–ø–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return
            
            folder_id = folders[0].id
            
            # –ü–æ–∏—Å–∫–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            search_terms = ["—Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏", "–Ω–æ–≤–æ—Å—Ç–∏", "–ø—Ä–æ–±–ª–µ–º—ã", "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç"]
            
            for term in search_terms:
                print(f"\nüîç –ü–æ–∏—Å–∫: '{term}'")
                
                result = await summariser.search_and_summarise(
                    folder_id=folder_id,
                    search_term=term,
                    limit=20
                )
                
                if result:
                    print(f"üìà –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤: {result.total_posts}")
                    print(f"üìÖ –ü–µ—Ä–∏–æ–¥: {result.date_range}")
                    print(f"üìù –°–≤–æ–¥–∫–∞: {result.overall_summary}")
                    
                    print(f"üéØ –û—Å–Ω–æ–≤–Ω—ã–µ —Ç–µ–º—ã:")
                    for topic in result.main_topics:
                        print(f"  ‚Ä¢ {topic}")
                else:
                    print("‚ùå –ü–æ–∏—Å–∫ –Ω–µ –¥–∞–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                
                print("-" * 50)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ: {e}")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ AI Summariser - –ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è")
    print("=" * 50)
    
    # –ü—Ä–∏–º–µ—Ä 1: –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è
    print("\n1Ô∏è‚É£ –ë–∞–∑–æ–≤–∞—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è")
    await basic_summarization()
    
    # –ü—Ä–∏–º–µ—Ä 2: –í–æ–ø—Ä–æ—Å—ã –∫ –ò–ò
    print("\n2Ô∏è‚É£ –í–æ–ø—Ä–æ—Å—ã –∫ –ò–ò")
    await ask_questions()
    
    # –ü—Ä–∏–º–µ—Ä 3: –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É
    print("\n3Ô∏è‚É£ –ü–æ–∏—Å–∫ –ø–æ –∫–æ–Ω—Ç–µ–Ω—Ç—É")
    await search_content()
    
    print("\n‚úÖ –ü—Ä–∏–º–µ—Ä—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã!")


if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã
    asyncio.run(main()) 