#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ AI Summariser –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
"""

import os
import sys
import importlib
import ast
from pathlib import Path
from typing import List, Dict, Any

def check_imports(file_path: str) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–º–ø–æ—Ä—Ç—ã –≤ —Ñ–∞–π–ª–µ"""
    issues = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        
        tree = ast.parse(content)
        imports = []
        
        for node in ast.walk(tree):
            if isinstance(node, ast.Import):
                for alias in node.names:
                    imports.append(alias.name)
            elif isinstance(node, ast.ImportFrom):
                if node.module:
                    imports.append(node.module)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
        stdlib_modules = {
            'asyncio', 'logging', 'json', 'datetime', 'typing', 
            'pathlib', 'os', 'sys', 'argparse'
        }
        
        for imp in imports:
            if imp in stdlib_modules:
                continue
            try:
                importlib.import_module(imp)
            except ImportError:
                issues.append(f"–ù–µ –Ω–∞–π–¥–µ–Ω –º–æ–¥—É–ª—å: {imp}")
                
    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {file_path}: {e}")
    
    return issues

def check_syntax(file_path: str) -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–∏–Ω—Ç–∞–∫—Å–∏—Å —Ñ–∞–π–ª–∞"""
    issues = []
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            content = f.read()
        ast.parse(content)
    except SyntaxError as e:
        issues.append(f"–°–∏–Ω—Ç–∞–∫—Å–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    except Exception as e:
        issues.append(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: {e}")
    return issues

def check_file_structure() -> Dict[str, Any]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤ –ø—Ä–æ–µ–∫—Ç–∞"""
    required_files = [
        'README.md',
        'setup.py',
        'requirements.txt',
        'LICENSE',
        '.gitignore',
        'ai_summariser/__init__.py',
        'ai_summariser/cli.py',
        'ai_summariser/core/__init__.py',
        'ai_summariser/core/database.py',
        'ai_summariser/core/summariser.py',
        'ai_summariser/core/ai_client.py',
        'ai_summariser/models/__init__.py',
        'ai_summariser/models/schemas.py',
        'ai_summariser/utils/__init__.py',
        'ai_summariser/utils/helpers.py',
        'tests/__init__.py',
        'tests/test_summariser.py',
        'tests/test_ai_client.py',
        'examples/basic_usage.py',
        'examples/advanced_analysis.py'
    ]
    
    missing_files = []
    existing_files = []
    
    for file_path in required_files:
        if Path(file_path).exists():
            existing_files.append(file_path)
        else:
            missing_files.append(file_path)
    
    return {
        'missing': missing_files,
        'existing': existing_files,
        'total_required': len(required_files),
        'total_existing': len(existing_files)
    }

def check_python_files() -> Dict[str, List[str]]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ Python —Ñ–∞–π–ª—ã"""
    python_files = []
    for root, dirs, files in os.walk('.'):
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –≤–Ω–µ—à–Ω–∏–µ –ø–∞–ø–∫–∏ –∏ —Å–∏—Å—Ç–µ–º–Ω—ã–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
        if any(skip in root for skip in ['venv', '.venv', '__pycache__', 'FreeGPT-Portable', '.git']):
            continue
        for file in files:
            if file.endswith('.py'):
                python_files.append(os.path.join(root, file))
    
    all_issues = {}
    
    for file_path in python_files:
        issues = []
        issues.extend(check_syntax(file_path))
        issues.extend(check_imports(file_path))
        
        if issues:
            all_issues[file_path] = issues
    
    return all_issues

def check_readme() -> List[str]:
    """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å README.md"""
    issues = []
    
    if not Path('README.md').exists():
        issues.append("README.md –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return issues
    
    with open('README.md', 'r', encoding='utf-8') as f:
        content = f.read()
    
    required_sections = [
        '# AI Summariser',
        '## üìã –û–ø–∏—Å–∞–Ω–∏–µ',
        '## üöÄ –ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç',
        '## üìÅ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø—Ä–æ–µ–∫—Ç–∞',
        '## üìù –õ–∏—Ü–µ–Ω–∑–∏—è'
    ]
    
    for section in required_sections:
        if section not in content:
            issues.append(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç —Ä–∞–∑–¥–µ–ª: {section}")
    
    return issues

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞ AI Summariser")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
    print("\nüìÅ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤...")
    structure = check_file_structure()
    
    print(f"   –í—Å–µ–≥–æ —Ñ–∞–π–ª–æ–≤: {structure['total_existing']}/{structure['total_required']}")
    
    if structure['missing']:
        print("   ‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
        for file in structure['missing']:
            print(f"      - {file}")
    else:
        print("   ‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Ñ–∞–π–ª–æ–≤
    print("\nüêç –ü—Ä–æ–≤–µ—Ä–∫–∞ Python —Ñ–∞–π–ª–æ–≤...")
    python_issues = check_python_files()
    
    if python_issues:
        print("   ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for file_path, issues in python_issues.items():
            print(f"      {file_path}:")
            for issue in issues:
                print(f"        - {issue}")
    else:
        print("   ‚úÖ –í—Å–µ Python —Ñ–∞–π–ª—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ README
    print("\nüìñ –ü—Ä–æ–≤–µ—Ä–∫–∞ README.md...")
    readme_issues = check_readme()
    
    if readme_issues:
        print("   ‚ùå –ü—Ä–æ–±–ª–µ–º—ã –≤ README:")
        for issue in readme_issues:
            print(f"      - {issue}")
    else:
        print("   ‚úÖ README.md –∫–æ—Ä—Ä–µ–∫—Ç–µ–Ω")
    
    # –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞
    print("\nüìä –ò—Ç–æ–≥–æ–≤–∞—è –æ—Ü–µ–Ω–∫–∞:")
    
    total_issues = len(structure['missing']) + len(python_issues) + len(readme_issues)
    
    if total_issues == 0:
        print("   üéâ –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏!")
        return True
    else:
        print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ {total_issues} –ø—Ä–æ–±–ª–µ–º")
        print("   –ò—Å–ø—Ä–∞–≤—å—Ç–µ –∏—Ö –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π")
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 